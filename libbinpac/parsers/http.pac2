#
# TODO:
#
# - Continued headers
# - decode URIs
# - connection: keep-alive, close
# - software versions
# - partial content

module HTTP;

import BinPAC;

type DeliveryMode = enum { EndOfData, Length, Multipart, Chunked };

const Token      = /[^ \t\r\n]+/;
const URI        = /[^ \t\r\n]+/;
const NewLine    = /\r?\n/;
const RestOfLine = /[^\r\n]*/;
const FullLine   = /[^\r\n]*\r?\n/;
const Integer    = /[0-9]+/;
const HexInteger = /[0-9a-zA-Z]+/;
const WhiteSpace = /[ \t]+/;
const OptionalWhiteSpace = /[ \t]*/;

bool reply_code_needs_body(status: uint64)
{
   return status <= 99 || (status >= 200 && status != 204 && status != 304);
}

export type Requests = unit {
    :  list<Request> &transient;
};

export type Request = unit {
    %port = 12345/tcp;
    request: RequestLine;
    message: Message(False, True);
};

export type Replies = unit {
    :  list<Reply> &transient;
};

type Reply = unit {
    reply: ReplyLine;
    message: Message(reply_code_needs_body(self.reply.status), False);
};

type Version = unit {
    :        /HTTP\//;
    number: /[0-9]+\.[0-9]*/;
};

export type RequestLine = unit {
    method:  Token;
    :        WhiteSpace;
    uri:     URI;
    :        WhiteSpace;
    version: Version;
    :        NewLine;
};

on RequestLine::version %debug {
    print "request", self.method, "|", self.uri, "|", self.version.number;
    }

type ReplyLine = unit {
    version: Version;
    :        WhiteSpace;
    status:  Integer &convert=$$.to_uint();
    :        OptionalWhiteSpace;
    reason:  RestOfLine;
    :        NewLine;
};

on ReplyLine::reason %debug {
    print "reply  ", self.version.number, "|", self.status, "|", self.reason;
    }

type Message = unit(body_default: bool, is_request: bool) {
    headers:    list<Header(self)>;
    end_of_hdr: NewLine;
    body:       Body(self, self.delivery_mode) if ( self.has_body );

    var content_length: uint64;
	var content_encoding: bytes;
    var content_type: tuple<bytes, bytes> = (b"TEXT", b"PLAIN");
    var content_type_parameter: bytes;
    var transfer_encoding: bytes;
    var multipart_boundary: bytes;

    var has_body: bool;
    var is_request: bool;
	var use_content_length: bool = True;
    var delivery_mode: DeliveryMode;

    on %init {
        self.has_body = body_default;
        self.is_request = is_request;
        # FIXME: This as &default doesn't work for some reason.
        self.delivery_mode = DeliveryMode::EndOfData;
        }

    on end_of_hdr {
        if ( self?.content_length && self.content_length > 0 )
            self.delivery_mode = DeliveryMode::Length;

        if ( self.content_type[0] == b"MULTIPART" ) {
            local boundary : bytes;

            boundary = self.content_type_parameter.match(/boundary="([^"]*)"/, 1);

            if ( ! |boundary| )
                boundary = self.content_type_parameter.match(/boundary=([^ ;]*)/, 1);

            self.delivery_mode = DeliveryMode::Multipart;
            self.multipart_boundary = b"--" + boundary + b"--\r\n";
        }

        if ( self?.transfer_encoding && self.transfer_encoding == b"chunked" )
            self.delivery_mode = DeliveryMode::Chunked;
    }
};

const HeaderName  = /[^:\r\n]+/;
const HeaderValue = /[^\r\n]*/;

type Header = unit(msg: Message) {
    name:    HeaderName &convert=$$.upper();
    :        /:[\t ]*/;
    content: HeaderValue;
    :        NewLine;

    on content {
        if ( self.name == b"CONTENT-LENGTH" ) {
            msg.content_length = self.content.to_uint();
            msg.has_body = True;
            }

        if ( self.name == b"TRANSFER-ENCODING" ) {
            msg.transfer_encoding = self.content;
            msg.has_body = True;
            }

        if ( self.name == b"CONTENT-ENCODING" )
            msg.content_encoding = self.content;

        if ( self.name == b"CONTENT-TYPE" ) {
            local ct: tuple<bytes,bytes> = self.content.split1(b";");
            local ty: tuple<bytes,bytes> = ct[0].split1(b"/");
            msg.content_type = (ty[0].strip().upper(), ty[1].strip().upper());
            msg.content_type_parameter = ct[1].strip();
            }
        }
};

type Body = unit(msg: Message, delivery_mode: DeliveryMode) {

    switch ( delivery_mode ) {

      DeliveryMode::EndOfData -> : bytes &eod &chunked -> self.data;

      DeliveryMode::Length    -> : bytes &length=msg.content_length &chunked -> self.data;

      DeliveryMode::Multipart -> : list<FullLine> &transient &until($$ == msg.multipart_boundary)
                                   foreach { self.data.write($$); }

      DeliveryMode::Chunked   -> : Chunks(self, msg);
    };

    var data: sink;
    var data_len: uint64;
    var content: Content;

    on %init {
        if ( msg.content_type[0] != b"" && msg.content_type[1] != b"" )
            self.data.connect_mime_type(msg.content_type[0] + b"/" + msg.content_type[1]);

        if ( msg?.content_encoding ) {
		    if ( msg.content_encoding == b"gzip" ) {
                self.data.add_filter(BinPAC::Filter::GZIP);
                msg.use_content_length = False;
				}

		    if ( msg.content_encoding == b"deflate" ) {
                self.data.add_filter(BinPAC::Filter::ZLIB);
                msg.use_content_length = False;
				}
        }

        self.content = new Content(msg);
        self.data.connect(self.content);
    }

	on %done {
	    # FIXME: Currently the sink becomes invalid after parsing for
		# the current instance finished. That's not great. See
		# ParserBuilder::_finalizeParseObject() to fix.
		self.data_len = |self.data|;
		}
};

export type Content = unit(msg: Message) {
    data: bytes &chunked &eod;
};

type Chunks = unit(body: Body, msg: Message) {
    :        list<Chunk(body)> &transient &until($$.length == 0);
    trailer: list<Header(msg)> &transient
                { msg.headers += self.trailer; }
    :        NewLine;
};

type Chunk = unit(body: Body) {
    length:    HexInteger &convert=$$.to_uint(16);
    :          OptionalWhiteSpace;
    extension: RestOfLine;
    :          NewLine;
    :          bytes &length=self.length &chunked -> body.data;
    :          NewLine if ( self.length != 0 );
};
